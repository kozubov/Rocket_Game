<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAKAAAAE0AAAByAAAAkAAA
        AKQAAACvAAAArwAAAKQAAACQAAAAcgAAAE0AAAAoAAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA8AAAAfwAAALoAAADhAAAA9QAA
        AP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD9AAAA9QAAAOEAAAC6AAAAfwAAADwAAAAMAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAABkAAAAvQAAAPIAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA8gAA
        AL0AAABkAAAAFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAABZAAAAyQAAAP0AAAD/AAAA/wAA
        APkAAADtAAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAA7QAA
        APkAAAD/AAAA/wAAAP0AAADJAAAAWQAAAAcAAAAAAAAAAAAAAAAAAAAYAAAAmgAAAPcAAAD/AAAA/wAA
        AP8AAAD/AAAAngAAADoAAADgAAAA5gAAANwAAADvAAAAyAAAAOcAAADnAAAAyAAAAO8AAADcAAAA5gAA
        AOAAAAA6AAAAngAAAP8AAAD/AAAA/wAAAP8AAAD3AAAAmgAAABgAAAAAAAAAGQAAALAAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAC/AAAAdgAAAO8AAACKAAAAZwAAALwAAAARAAAAlgAAAJYAAAARAAAAvAAA
        AGcAAACKAAAA7wAAAHYAAAC/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAsAAAABkAAACFAAAA9wAA
        AKwAAADpAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIQAAABdAAAAuAAAAAQAAACQAAAAkAAA
        AAQAAAC4AAAAXQAAAIQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6QAAAKwAAAD3AAAAhQAA
        AIYAAADzAAAAQQAAAJgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAywAAAI4AAAC3AAAABAAA
        AJAAAACQAAAABAAAALcAAACOAAAAywAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACYAAAAQgAA
        APMAAACGAAAAMwAAAOgAAACLAAAASAAAAPYAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+AAA
        ALkAAAAHAAAAkQAAAJEAAAAHAAAAuQAAAPgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9gAA
        AEgAAACLAAAA6AAAADMAAAAFAAAAqQAAANoAAAArAAAAxAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA6AAAAK4AAADcAAAA3AAAAK4AAADoAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAADEAAAALAAAANoAAACpAAAABQAAAAAAAABWAAAA+AAAAFsAAABzAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAApAAAAG0AAABtAAAApAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAHMAAABbAAAA+AAAAFYAAAAAAAAAAAAAABcAAADWAAAAsAAAADIAAADmAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAABVAAAAAAAAAAAAAABVAAAA/QAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAADmAAAAMgAAALEAAADWAAAAFwAAAAAAAAAAAAAAAAAAAIkAAADvAAAAOAAA
        AKMAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAG8AAAAAAAAAAAAAAG8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKMAAAA4AAAA7wAAAIkAAAAAAAAAAAAAAAAAAAAAAAAAOQAA
        APIAAAB/AAAAUQAAAPoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA2gAAAGEAAABhAAAA2gAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD6AAAAUQAAAH8AAADyAAAAOQAAAAAAAAAAAAAAAAAA
        AAAAAAAJAAAAugAAANEAAAArAAAAzgAAAP8AAADxAAAA0QAAAM4AAADOAAAAzgAAAM8AAADoAAAA/QAA
        AP0AAADoAAAAzwAAAM4AAADOAAAAzgAAANEAAADxAAAA/wAAAM4AAAArAAAA0QAAALoAAAAJAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAABnAAAA+AAAAFEAAAB/AAAA/wAAAG4AAAAQAAAAEQAAABEAAAARAAAADwAA
        AE0AAAD0AAAA9AAAAE0AAAAPAAAAEQAAABEAAAARAAAAEAAAAG4AAAD/AAAAfwAAAFEAAAD5AAAAZwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEAAADhAAAApQAAADgAAADnAAAATAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAALgAAAO8AAADvAAAALgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAOcAAAA4AAAApQAA
        AOEAAAAhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAJoAAADpAAAAMgAAAK4AAACaAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAABAAAAA9gAAAPYAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAACaAAAArgAA
        ADIAAADpAAAAmgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAPoAAAB+AAAASgAA
        AOgAAAB9AAAAGgAAAAMAAAACAAAAHQAAAKoAAAD/AAAA/wAAAKoAAAAdAAAAAgAAAAMAAAAaAAAAfQAA
        AOgAAABKAAAAfgAAAPoAAABMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAA9AAA
        AOEAAAA0AAAAiAAAAPwAAADaAAAArgAAAK0AAADbAAAA8AAAALUAAAC1AAAA8AAAANsAAACtAAAArgAA
        ANoAAAD8AAAAiAAAADQAAADhAAAA9AAAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADgAAADyAAAA/wAAALgAAAAqAAAAawAAAMcAAADkAAAA3gAAAKkAAABHAAAALwAAAC8AAABHAAAAqQAA
        AN4AAADkAAAAxwAAAGsAAAAqAAAAuAAAAP8AAADyAAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAOAAAAPIAAAD/AAAA/wAAAMcAAABYAAAALgAAAC8AAAAuAAAANwAAAIAAAADhAAAA4QAA
        AIAAAAA3AAAALgAAAC8AAAAuAAAAWAAAAMcAAAD/AAAA/wAAAPIAAAA4AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAA4AAAA8gAAAP8AAAD/AAAA/wAAAPoAAADgAAAAzAAAANEAAADsAAAA/wAA
        AP8AAAD/AAAA/wAAAOwAAADRAAAAzAAAAOAAAAD6AAAA/wAAAP8AAAD/AAAA8gAAADgAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADEAAADuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADuAAAAMQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAAANsAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        ANsAAAAbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAqgAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAqgAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABUAAAA+QAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAPkAAABUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAsAAACtAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAArQAAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAACoAAADQAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAANAAAAAqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMAAADEAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADEAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABoAAACCAAAA2wAAAPsAAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPsAAADbAAAAggAAABoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlAAAAZQAA
        AJgAAACuAAAAsQAAALEAAACxAAAAsQAAAK4AAACYAAAAZQAAACUAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA8AAAD8AAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAgAAAAYAAAAHAAAADwAAAA8AAAAPgAAAH4AAAB+AAAAfgAAAH4AAAB+AA
        AAfgAAAH4AAAB/AAAA/wAAAP+AAAH/wAAD8=
</value>
  </data>
</root>